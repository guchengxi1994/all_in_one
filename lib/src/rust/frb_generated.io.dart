// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'api/software_monitor_api.dart';
import 'api/system_monitor_api.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'software_monitor/software.dart';
import 'system_monitor.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  RustStreamSink<Int64List> dco_decode_StreamSink_list_prim_i_64_strict_Sse(
      dynamic raw);

  @protected
  RustStreamSink<MonitorInfo> dco_decode_StreamSink_monitor_info_Sse(
      dynamic raw);

  @protected
  RustStreamSink<(Int64List, String)>
      dco_decode_StreamSink_record_list_prim_i_64_strict_string_Sse(
          dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  CpuInfo dco_decode_box_autoadd_cpu_info(dynamic raw);

  @protected
  MemoryInfo dco_decode_box_autoadd_memory_info(dynamic raw);

  @protected
  CpuInfo dco_decode_cpu_info(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  int dco_decode_i_64(dynamic raw);

  @protected
  List<MountedInfo> dco_decode_list_mounted_info(dynamic raw);

  @protected
  Int64List dco_decode_list_prim_i_64_strict(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<(int, String)> dco_decode_list_record_i_64_string(dynamic raw);

  @protected
  List<Software> dco_decode_list_software(dynamic raw);

  @protected
  MemoryInfo dco_decode_memory_info(dynamic raw);

  @protected
  MonitorInfo dco_decode_monitor_info(dynamic raw);

  @protected
  MountedInfo dco_decode_mounted_info(dynamic raw);

  @protected
  CpuInfo? dco_decode_opt_box_autoadd_cpu_info(dynamic raw);

  @protected
  MemoryInfo? dco_decode_opt_box_autoadd_memory_info(dynamic raw);

  @protected
  List<MountedInfo>? dco_decode_opt_list_mounted_info(dynamic raw);

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw);

  @protected
  (int, String) dco_decode_record_i_64_string(dynamic raw);

  @protected
  (Int64List, String) dco_decode_record_list_prim_i_64_strict_string(
      dynamic raw);

  @protected
  Software dco_decode_software(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  RustStreamSink<Int64List> sse_decode_StreamSink_list_prim_i_64_strict_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<MonitorInfo> sse_decode_StreamSink_monitor_info_Sse(
      SseDeserializer deserializer);

  @protected
  RustStreamSink<(Int64List, String)>
      sse_decode_StreamSink_record_list_prim_i_64_strict_string_Sse(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  CpuInfo sse_decode_box_autoadd_cpu_info(SseDeserializer deserializer);

  @protected
  MemoryInfo sse_decode_box_autoadd_memory_info(SseDeserializer deserializer);

  @protected
  CpuInfo sse_decode_cpu_info(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  int sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<MountedInfo> sse_decode_list_mounted_info(SseDeserializer deserializer);

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<(int, String)> sse_decode_list_record_i_64_string(
      SseDeserializer deserializer);

  @protected
  List<Software> sse_decode_list_software(SseDeserializer deserializer);

  @protected
  MemoryInfo sse_decode_memory_info(SseDeserializer deserializer);

  @protected
  MonitorInfo sse_decode_monitor_info(SseDeserializer deserializer);

  @protected
  MountedInfo sse_decode_mounted_info(SseDeserializer deserializer);

  @protected
  CpuInfo? sse_decode_opt_box_autoadd_cpu_info(SseDeserializer deserializer);

  @protected
  MemoryInfo? sse_decode_opt_box_autoadd_memory_info(
      SseDeserializer deserializer);

  @protected
  List<MountedInfo>? sse_decode_opt_list_mounted_info(
      SseDeserializer deserializer);

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  (int, String) sse_decode_record_i_64_string(SseDeserializer deserializer);

  @protected
  (Int64List, String) sse_decode_record_list_prim_i_64_strict_string(
      SseDeserializer deserializer);

  @protected
  Software sse_decode_software(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_list_prim_i_64_strict_Sse(
      RustStreamSink<Int64List> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_monitor_info_Sse(
      RustStreamSink<MonitorInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_record_list_prim_i_64_strict_string_Sse(
      RustStreamSink<(Int64List, String)> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_cpu_info(CpuInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_memory_info(
      MemoryInfo self, SseSerializer serializer);

  @protected
  void sse_encode_cpu_info(CpuInfo self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_mounted_info(
      List<MountedInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_record_i_64_string(
      List<(int, String)> self, SseSerializer serializer);

  @protected
  void sse_encode_list_software(List<Software> self, SseSerializer serializer);

  @protected
  void sse_encode_memory_info(MemoryInfo self, SseSerializer serializer);

  @protected
  void sse_encode_monitor_info(MonitorInfo self, SseSerializer serializer);

  @protected
  void sse_encode_mounted_info(MountedInfo self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_cpu_info(
      CpuInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_memory_info(
      MemoryInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_mounted_info(
      List<MountedInfo>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer);

  @protected
  void sse_encode_record_i_64_string(
      (int, String) self, SseSerializer serializer);

  @protected
  void sse_encode_record_list_prim_i_64_strict_string(
      (Int64List, String) self, SseSerializer serializer);

  @protected
  void sse_encode_software(Software self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;
}
