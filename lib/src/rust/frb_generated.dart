// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/llm_api.dart';
import 'api/llm_plugin_api.dart';
import 'api/process_port_mapper_api.dart';
import 'api/simple.dart';
import 'api/software_monitor_api.dart';
import 'api/sub_window_api.dart';
import 'api/system_monitor_api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'llm.dart';
import 'llm/app_flowy_model.dart';
import 'llm/plugins/chat_db.dart';
import 'llm/plugins/chat_db/mysql.dart';
import 'llm/template.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'software_monitor/software.dart';
import 'system_monitor.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.31';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_all_in_one',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> chat(
      {String? uuid,
      List<LLMMessage>? history,
      required bool stream,
      required String query,
      dynamic hint});

  Future<void> generateFromTemplate(
      {required List<(String, int, int?, AttributeType, String?)> v,
      required bool enablePlugin,
      dynamic hint});

  Root? getDocRootFromStr({required String s, dynamic hint});

  EnvParams? getLlmConfig({dynamic hint});

  void initLlm({required String p, dynamic hint});

  Stream<LLMMessage> llmMessageStream({dynamic hint});

  Future<String> optimizeDoc({required String s, dynamic hint});

  Future<void> sequentialChainChat(
      {required String jsonStr, required String query, dynamic hint});

  Stream<TemplateResult> templateMessageStream({dynamic hint});

  Future<String?> templateRenderer({required String template, dynamic hint});

  Stream<TemplateRunningStage> templateStateStream({dynamic hint});

  Future<List<(String, AttributeType, String?)>> templateToPrompts(
      {required String template, dynamic hint});

  Future<Map<String, String>?> eval(
      {required String sqlStr,
      required DatabaseInfo db,
      required List<(String, CellType)> keys,
      dynamic hint});

  Future<List<List<TableInfo>>> getMysqlTableInfo(
      {required DatabaseInfo s, dynamic hint});

  Future<List<ProcessPortMapper>> getProcessPortMappers({dynamic hint});

  String greet({required String name, dynamic hint});

  Future<void> initApp({dynamic hint});

  Future<void> addToWatchingList(
      {required int id, required String name, dynamic hint});

  Future<List<Software>> getInstalledSoftwares({dynamic hint});

  Future<void> initMonitor({required List<(int, String)> items, dynamic hint});

  Future<void> removeFromWatchingList({required int id, dynamic hint});

  Stream<Int64List> softwareWatchingMessageStream({dynamic hint});

  Stream<(Int64List, String)> softwareWatchingWithForegroundMessageStream(
      {dynamic hint});

  Future<void> createEventLoop({dynamic hint});

  Future<void> showTodos(
      {required List<RustSimpleNotifyLibPinWindowItem> data, dynamic hint});

  Future<void> startSystemMonitor({dynamic hint});

  Stream<MonitorInfo> systemMonitorMessageStream({dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RustSimpleNotifyLibPinWindowItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RustSimpleNotifyLibPinWindowItem;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RustSimpleNotifyLibPinWindowItemPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> chat(
      {String? uuid,
      List<LLMMessage>? history,
      required bool stream,
      required String query,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(uuid, serializer);
        sse_encode_opt_list_llm_message(history, serializer);
        sse_encode_bool(stream, serializer);
        sse_encode_String(query, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kChatConstMeta,
      argValues: [uuid, history, stream, query],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kChatConstMeta => const TaskConstMeta(
        debugName: "chat",
        argNames: ["uuid", "history", "stream", "query"],
      );

  @override
  Future<void> generateFromTemplate(
      {required List<(String, int, int?, AttributeType, String?)> v,
      required bool enablePlugin,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_u_32_opt_box_autoadd_u_32_attribute_type_opt_string(
            v, serializer);
        sse_encode_bool(enablePlugin, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGenerateFromTemplateConstMeta,
      argValues: [v, enablePlugin],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGenerateFromTemplateConstMeta => const TaskConstMeta(
        debugName: "generate_from_template",
        argNames: ["v", "enablePlugin"],
      );

  @override
  Root? getDocRootFromStr({required String s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_root,
        decodeErrorData: null,
      ),
      constMeta: kGetDocRootFromStrConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetDocRootFromStrConstMeta => const TaskConstMeta(
        debugName: "get_doc_root_from_str",
        argNames: ["s"],
      );

  @override
  EnvParams? getLlmConfig({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_env_params,
        decodeErrorData: null,
      ),
      constMeta: kGetLlmConfigConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetLlmConfigConstMeta => const TaskConstMeta(
        debugName: "get_llm_config",
        argNames: [],
      );

  @override
  void initLlm({required String p, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(p, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitLlmConstMeta,
      argValues: [p],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitLlmConstMeta => const TaskConstMeta(
        debugName: "init_llm",
        argNames: ["p"],
      );

  @override
  Stream<LLMMessage> llmMessageStream({dynamic hint}) {
    final s = RustStreamSink<LLMMessage>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_llm_message_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kLlmMessageStreamConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
    return s.stream;
  }

  TaskConstMeta get kLlmMessageStreamConstMeta => const TaskConstMeta(
        debugName: "llm_message_stream",
        argNames: ["s"],
      );

  @override
  Future<String> optimizeDoc({required String s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kOptimizeDocConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOptimizeDocConstMeta => const TaskConstMeta(
        debugName: "optimize_doc",
        argNames: ["s"],
      );

  @override
  Future<void> sequentialChainChat(
      {required String jsonStr, required String query, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(jsonStr, serializer);
        sse_encode_String(query, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSequentialChainChatConstMeta,
      argValues: [jsonStr, query],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSequentialChainChatConstMeta => const TaskConstMeta(
        debugName: "sequential_chain_chat",
        argNames: ["jsonStr", "query"],
      );

  @override
  Stream<TemplateResult> templateMessageStream({dynamic hint}) {
    final s = RustStreamSink<TemplateResult>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_template_result_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kTemplateMessageStreamConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
    return s.stream;
  }

  TaskConstMeta get kTemplateMessageStreamConstMeta => const TaskConstMeta(
        debugName: "template_message_stream",
        argNames: ["s"],
      );

  @override
  Future<String?> templateRenderer({required String template, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(template, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kTemplateRendererConstMeta,
      argValues: [template],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTemplateRendererConstMeta => const TaskConstMeta(
        debugName: "template_renderer",
        argNames: ["template"],
      );

  @override
  Stream<TemplateRunningStage> templateStateStream({dynamic hint}) {
    final s = RustStreamSink<TemplateRunningStage>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_template_running_stage_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kTemplateStateStreamConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
    return s.stream;
  }

  TaskConstMeta get kTemplateStateStreamConstMeta => const TaskConstMeta(
        debugName: "template_state_stream",
        argNames: ["s"],
      );

  @override
  Future<List<(String, AttributeType, String?)>> templateToPrompts(
      {required String template, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(template, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_record_string_attribute_type_opt_string,
        decodeErrorData: null,
      ),
      constMeta: kTemplateToPromptsConstMeta,
      argValues: [template],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTemplateToPromptsConstMeta => const TaskConstMeta(
        debugName: "template_to_prompts",
        argNames: ["template"],
      );

  @override
  Future<Map<String, String>?> eval(
      {required String sqlStr,
      required DatabaseInfo db,
      required List<(String, CellType)> keys,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sqlStr, serializer);
        sse_encode_box_autoadd_database_info(db, serializer);
        sse_encode_list_record_string_cell_type(keys, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_Map_String_String,
        decodeErrorData: null,
      ),
      constMeta: kEvalConstMeta,
      argValues: [sqlStr, db, keys],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEvalConstMeta => const TaskConstMeta(
        debugName: "eval",
        argNames: ["sqlStr", "db", "keys"],
      );

  @override
  Future<List<List<TableInfo>>> getMysqlTableInfo(
      {required DatabaseInfo s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_database_info(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_list_table_info,
        decodeErrorData: null,
      ),
      constMeta: kGetMysqlTableInfoConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMysqlTableInfoConstMeta => const TaskConstMeta(
        debugName: "get_mysql_table_info",
        argNames: ["s"],
      );

  @override
  Future<List<ProcessPortMapper>> getProcessPortMappers({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_process_port_mapper,
        decodeErrorData: null,
      ),
      constMeta: kGetProcessPortMappersConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetProcessPortMappersConstMeta => const TaskConstMeta(
        debugName: "get_process_port_mappers",
        argNames: [],
      );

  @override
  String greet({required String name, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kGreetConstMeta,
      argValues: [name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> addToWatchingList(
      {required int id, required String name, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(id, serializer);
        sse_encode_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAddToWatchingListConstMeta,
      argValues: [id, name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddToWatchingListConstMeta => const TaskConstMeta(
        debugName: "add_to_watching_list",
        argNames: ["id", "name"],
      );

  @override
  Future<List<Software>> getInstalledSoftwares({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_software,
        decodeErrorData: null,
      ),
      constMeta: kGetInstalledSoftwaresConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetInstalledSoftwaresConstMeta => const TaskConstMeta(
        debugName: "get_installed_softwares",
        argNames: [],
      );

  @override
  Future<void> initMonitor({required List<(int, String)> items, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_i_64_string(items, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitMonitorConstMeta,
      argValues: [items],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitMonitorConstMeta => const TaskConstMeta(
        debugName: "init_monitor",
        argNames: ["items"],
      );

  @override
  Future<void> removeFromWatchingList({required int id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRemoveFromWatchingListConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRemoveFromWatchingListConstMeta => const TaskConstMeta(
        debugName: "remove_from_watching_list",
        argNames: ["id"],
      );

  @override
  Stream<Int64List> softwareWatchingMessageStream({dynamic hint}) {
    final s = RustStreamSink<Int64List>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_prim_i_64_strict_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSoftwareWatchingMessageStreamConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
    return s.stream;
  }

  TaskConstMeta get kSoftwareWatchingMessageStreamConstMeta =>
      const TaskConstMeta(
        debugName: "software_watching_message_stream",
        argNames: ["s"],
      );

  @override
  Stream<(Int64List, String)> softwareWatchingWithForegroundMessageStream(
      {dynamic hint}) {
    final s = RustStreamSink<(Int64List, String)>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_record_list_prim_i_64_strict_string_Sse(
            s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSoftwareWatchingWithForegroundMessageStreamConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
    return s.stream;
  }

  TaskConstMeta get kSoftwareWatchingWithForegroundMessageStreamConstMeta =>
      const TaskConstMeta(
        debugName: "software_watching_with_foreground_message_stream",
        argNames: ["s"],
      );

  @override
  Future<void> createEventLoop({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCreateEventLoopConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEventLoopConstMeta => const TaskConstMeta(
        debugName: "create_event_loop",
        argNames: [],
      );

  @override
  Future<void> showTodos(
      {required List<RustSimpleNotifyLibPinWindowItem> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kShowTodosConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kShowTodosConstMeta => const TaskConstMeta(
        debugName: "show_todos",
        argNames: ["data"],
      );

  @override
  Future<void> startSystemMonitor({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStartSystemMonitorConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStartSystemMonitorConstMeta => const TaskConstMeta(
        debugName: "start_system_monitor",
        argNames: [],
      );

  @override
  Stream<MonitorInfo> systemMonitorMessageStream({dynamic hint}) {
    final s = RustStreamSink<MonitorInfo>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_monitor_info_Sse(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSystemMonitorMessageStreamConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
    return s.stream;
  }

  TaskConstMeta get kSystemMonitorMessageStreamConstMeta => const TaskConstMeta(
        debugName: "system_monitor_message_stream",
        argNames: ["s"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RustSimpleNotifyLibPinWindowItem => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RustSimpleNotifyLibPinWindowItem => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustSimpleNotifyLibPinWindowItem
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustSimpleNotifyLibPinWindowItem.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustSimpleNotifyLibPinWindowItem
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustSimpleNotifyLibPinWindowItem.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<Int64List> dco_decode_StreamSink_list_prim_i_64_strict_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LLMMessage> dco_decode_StreamSink_llm_message_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MonitorInfo> dco_decode_StreamSink_monitor_info_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<(Int64List, String)>
      dco_decode_StreamSink_record_list_prim_i_64_strict_string_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<TemplateResult> dco_decode_StreamSink_template_result_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<TemplateRunningStage>
      dco_decode_StreamSink_template_running_stage_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AttributeType dco_decode_attribute_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AttributeType.values[raw as int];
  }

  @protected
  Attributes dco_decode_attributes(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Attributes(
      bold: dco_decode_opt_box_autoadd_bool(arr[0]),
      italic: dco_decode_opt_box_autoadd_bool(arr[1]),
      file: dco_decode_opt_String(arr[2]),
      sql: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Attributes dco_decode_box_autoadd_attributes(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_attributes(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CpuInfo dco_decode_box_autoadd_cpu_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_cpu_info(raw);
  }

  @protected
  DatabaseInfo dco_decode_box_autoadd_database_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_database_info(raw);
  }

  @protected
  EnvParams dco_decode_box_autoadd_env_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_env_params(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  MemoryInfo dco_decode_box_autoadd_memory_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_memory_info(raw);
  }

  @protected
  Root dco_decode_box_autoadd_root(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_root(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  CellType dco_decode_cell_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CellType.values[raw as int];
  }

  @protected
  Children dco_decode_children(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Children(
      typeField: dco_decode_String(arr[0]),
      data: dco_decode_data(arr[1]),
    );
  }

  @protected
  CpuInfo dco_decode_cpu_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CpuInfo(
      current: dco_decode_f_32(arr[0]),
    );
  }

  @protected
  Data dco_decode_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Data(
      level: dco_decode_opt_box_autoadd_i_64(arr[0]),
      delta: dco_decode_list_delum(arr[1]),
      align: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  DatabaseInfo dco_decode_database_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return DatabaseInfo(
      name: dco_decode_String(arr[0]),
      address: dco_decode_String(arr[1]),
      port: dco_decode_String(arr[2]),
      username: dco_decode_String(arr[3]),
      password: dco_decode_String(arr[4]),
      database: dco_decode_String(arr[5]),
    );
  }

  @protected
  Delum dco_decode_delum(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Delum(
      insert: dco_decode_String(arr[0]),
      attributes: dco_decode_opt_box_autoadd_attributes(arr[1]),
    );
  }

  @protected
  Document dco_decode_document(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Document(
      typeField: dco_decode_String(arr[0]),
      children: dco_decode_list_children(arr[1]),
    );
  }

  @protected
  EnvParams dco_decode_env_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return EnvParams(
      base: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      chatBase: dco_decode_String(arr[2]),
      sk: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  List<RustSimpleNotifyLibPinWindowItem>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem)
        .toList();
  }

  @protected
  List<Children> dco_decode_list_children(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_children).toList();
  }

  @protected
  List<Delum> dco_decode_list_delum(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_delum).toList();
  }

  @protected
  List<List<TableInfo>> dco_decode_list_list_table_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_table_info).toList();
  }

  @protected
  List<LLMMessage> dco_decode_list_llm_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_llm_message).toList();
  }

  @protected
  List<MountedInfo> dco_decode_list_mounted_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_mounted_info).toList();
  }

  @protected
  Int64List dco_decode_list_prim_i_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Int64List.from(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ProcessPortMapper> dco_decode_list_process_port_mapper(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_process_port_mapper).toList();
  }

  @protected
  List<(int, String)> dco_decode_list_record_i_64_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_64_string).toList();
  }

  @protected
  List<(String, AttributeType, String?)>
      dco_decode_list_record_string_attribute_type_opt_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_attribute_type_opt_string)
        .toList();
  }

  @protected
  List<(String, CellType)> dco_decode_list_record_string_cell_type(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_cell_type)
        .toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<(String, int, int?, AttributeType, String?)>
      dco_decode_list_record_string_u_32_opt_box_autoadd_u_32_attribute_type_opt_string(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_record_string_u_32_opt_box_autoadd_u_32_attribute_type_opt_string)
        .toList();
  }

  @protected
  List<Software> dco_decode_list_software(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_software).toList();
  }

  @protected
  List<SoftwareCpu> dco_decode_list_software_cpu(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_software_cpu).toList();
  }

  @protected
  List<SoftwareMemory> dco_decode_list_software_memory(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_software_memory).toList();
  }

  @protected
  List<TableInfo> dco_decode_list_table_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_table_info).toList();
  }

  @protected
  LLMMessage dco_decode_llm_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LLMMessage(
      uuid: dco_decode_String(arr[0]),
      content: dco_decode_String(arr[1]),
      type: dco_decode_u_8(arr[2]),
    );
  }

  @protected
  MemoryInfo dco_decode_memory_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MemoryInfo(
      used: dco_decode_u_64(arr[0]),
      total: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  MonitorInfo dco_decode_monitor_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return MonitorInfo(
      disks: dco_decode_opt_list_mounted_info(arr[0]),
      memory: dco_decode_opt_box_autoadd_memory_info(arr[1]),
      cpu: dco_decode_opt_box_autoadd_cpu_info(arr[2]),
      top5Memory: dco_decode_opt_list_software_memory(arr[3]),
      top5Cpu: dco_decode_opt_list_software_cpu(arr[4]),
    );
  }

  @protected
  MountedInfo dco_decode_mounted_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return MountedInfo(
      disk: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      fs: dco_decode_String(arr[2]),
      available: dco_decode_u_64(arr[3]),
      total: dco_decode_u_64(arr[4]),
    );
  }

  @protected
  Map<String, String>? dco_decode_opt_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_Map_String_String(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Attributes? dco_decode_opt_box_autoadd_attributes(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_attributes(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  CpuInfo? dco_decode_opt_box_autoadd_cpu_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_cpu_info(raw);
  }

  @protected
  EnvParams? dco_decode_opt_box_autoadd_env_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_env_params(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  MemoryInfo? dco_decode_opt_box_autoadd_memory_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_memory_info(raw);
  }

  @protected
  Root? dco_decode_opt_box_autoadd_root(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_root(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  List<LLMMessage>? dco_decode_opt_list_llm_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_llm_message(raw);
  }

  @protected
  List<MountedInfo>? dco_decode_opt_list_mounted_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_mounted_info(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  List<SoftwareCpu>? dco_decode_opt_list_software_cpu(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_software_cpu(raw);
  }

  @protected
  List<SoftwareMemory>? dco_decode_opt_list_software_memory(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_software_memory(raw);
  }

  @protected
  ProcessPortMapper dco_decode_process_port_mapper(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ProcessPortMapper(
      pid: dco_decode_u_32(arr[0]),
      localPort: dco_decode_u_32(arr[1]),
      status: dco_decode_opt_String(arr[2]),
      processName: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  (int, String) dco_decode_record_i_64_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_64(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (Int64List, String) dco_decode_record_list_prim_i_64_strict_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_prim_i_64_strict(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (String, AttributeType, String?)
      dco_decode_record_string_attribute_type_opt_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_attribute_type(arr[1]),
      dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  (String, CellType) dco_decode_record_string_cell_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_cell_type(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (
    String,
    int,
    int?,
    AttributeType,
    String?
  ) dco_decode_record_string_u_32_opt_box_autoadd_u_32_attribute_type_opt_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5) {
      throw Exception('Expected 5 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_u_32(arr[1]),
      dco_decode_opt_box_autoadd_u_32(arr[2]),
      dco_decode_attribute_type(arr[3]),
      dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  Root dco_decode_root(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Root(
      document: dco_decode_document(arr[0]),
    );
  }

  @protected
  Software dco_decode_software(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Software(
      name: dco_decode_String(arr[0]),
      iconPath: dco_decode_String(arr[1]),
      icon: dco_decode_opt_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  SoftwareCpu dco_decode_software_cpu(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SoftwareCpu(
      cpu: dco_decode_f_32(arr[0]),
      name: dco_decode_String(arr[1]),
    );
  }

  @protected
  SoftwareMemory dco_decode_software_memory(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SoftwareMemory(
      memory: dco_decode_u_64(arr[0]),
      name: dco_decode_String(arr[1]),
    );
  }

  @protected
  TableInfo dco_decode_table_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TableInfo(
      tableName: dco_decode_String(arr[0]),
      columnName: dco_decode_String(arr[1]),
      dataType: dco_decode_String(arr[2]),
    );
  }

  @protected
  TemplateResult dco_decode_template_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TemplateResult(
      prompt: dco_decode_String(arr[0]),
      index: dco_decode_u_32(arr[1]),
      response: dco_decode_String(arr[2]),
    );
  }

  @protected
  TemplateRunningStage dco_decode_template_running_stage(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TemplateRunningStage.values[raw as int];
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustSimpleNotifyLibPinWindowItem
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustSimpleNotifyLibPinWindowItem.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustSimpleNotifyLibPinWindowItem
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustSimpleNotifyLibPinWindowItem.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<Int64List> sse_decode_StreamSink_list_prim_i_64_strict_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LLMMessage> sse_decode_StreamSink_llm_message_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MonitorInfo> sse_decode_StreamSink_monitor_info_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<(Int64List, String)>
      sse_decode_StreamSink_record_list_prim_i_64_strict_string_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<TemplateResult> sse_decode_StreamSink_template_result_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<TemplateRunningStage>
      sse_decode_StreamSink_template_running_stage_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AttributeType sse_decode_attribute_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return AttributeType.values[inner];
  }

  @protected
  Attributes sse_decode_attributes(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bold = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_italic = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_file = sse_decode_opt_String(deserializer);
    var var_sql = sse_decode_opt_String(deserializer);
    return Attributes(
        bold: var_bold, italic: var_italic, file: var_file, sql: var_sql);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Attributes sse_decode_box_autoadd_attributes(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_attributes(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  CpuInfo sse_decode_box_autoadd_cpu_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_cpu_info(deserializer));
  }

  @protected
  DatabaseInfo sse_decode_box_autoadd_database_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_database_info(deserializer));
  }

  @protected
  EnvParams sse_decode_box_autoadd_env_params(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_env_params(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  MemoryInfo sse_decode_box_autoadd_memory_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_memory_info(deserializer));
  }

  @protected
  Root sse_decode_box_autoadd_root(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_root(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  CellType sse_decode_cell_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return CellType.values[inner];
  }

  @protected
  Children sse_decode_children(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_typeField = sse_decode_String(deserializer);
    var var_data = sse_decode_data(deserializer);
    return Children(typeField: var_typeField, data: var_data);
  }

  @protected
  CpuInfo sse_decode_cpu_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_current = sse_decode_f_32(deserializer);
    return CpuInfo(current: var_current);
  }

  @protected
  Data sse_decode_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_level = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_delta = sse_decode_list_delum(deserializer);
    var var_align = sse_decode_opt_String(deserializer);
    return Data(level: var_level, delta: var_delta, align: var_align);
  }

  @protected
  DatabaseInfo sse_decode_database_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_port = sse_decode_String(deserializer);
    var var_username = sse_decode_String(deserializer);
    var var_password = sse_decode_String(deserializer);
    var var_database = sse_decode_String(deserializer);
    return DatabaseInfo(
        name: var_name,
        address: var_address,
        port: var_port,
        username: var_username,
        password: var_password,
        database: var_database);
  }

  @protected
  Delum sse_decode_delum(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_insert = sse_decode_String(deserializer);
    var var_attributes = sse_decode_opt_box_autoadd_attributes(deserializer);
    return Delum(insert: var_insert, attributes: var_attributes);
  }

  @protected
  Document sse_decode_document(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_typeField = sse_decode_String(deserializer);
    var var_children = sse_decode_list_children(deserializer);
    return Document(typeField: var_typeField, children: var_children);
  }

  @protected
  EnvParams sse_decode_env_params(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_base = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_chatBase = sse_decode_String(deserializer);
    var var_sk = sse_decode_opt_String(deserializer);
    return EnvParams(
        base: var_base, name: var_name, chatBase: var_chatBase, sk: var_sk);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  List<RustSimpleNotifyLibPinWindowItem>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RustSimpleNotifyLibPinWindowItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<Children> sse_decode_list_children(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Children>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_children(deserializer));
    }
    return ans_;
  }

  @protected
  List<Delum> sse_decode_list_delum(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Delum>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_delum(deserializer));
    }
    return ans_;
  }

  @protected
  List<List<TableInfo>> sse_decode_list_list_table_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <List<TableInfo>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_table_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<LLMMessage> sse_decode_list_llm_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LLMMessage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_llm_message(deserializer));
    }
    return ans_;
  }

  @protected
  List<MountedInfo> sse_decode_list_mounted_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MountedInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_mounted_info(deserializer));
    }
    return ans_;
  }

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ProcessPortMapper> sse_decode_list_process_port_mapper(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProcessPortMapper>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_process_port_mapper(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, String)> sse_decode_list_record_i_64_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_64_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, AttributeType, String?)>
      sse_decode_list_record_string_attribute_type_opt_string(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, AttributeType, String?)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_attribute_type_opt_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, CellType)> sse_decode_list_record_string_cell_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, CellType)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_cell_type(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, int, int?, AttributeType, String?)>
      sse_decode_list_record_string_u_32_opt_box_autoadd_u_32_attribute_type_opt_string(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, int, int?, AttributeType, String?)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_u_32_opt_box_autoadd_u_32_attribute_type_opt_string(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<Software> sse_decode_list_software(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Software>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_software(deserializer));
    }
    return ans_;
  }

  @protected
  List<SoftwareCpu> sse_decode_list_software_cpu(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SoftwareCpu>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_software_cpu(deserializer));
    }
    return ans_;
  }

  @protected
  List<SoftwareMemory> sse_decode_list_software_memory(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SoftwareMemory>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_software_memory(deserializer));
    }
    return ans_;
  }

  @protected
  List<TableInfo> sse_decode_list_table_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TableInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_table_info(deserializer));
    }
    return ans_;
  }

  @protected
  LLMMessage sse_decode_llm_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_String(deserializer);
    var var_content = sse_decode_String(deserializer);
    var var_type = sse_decode_u_8(deserializer);
    return LLMMessage(uuid: var_uuid, content: var_content, type: var_type);
  }

  @protected
  MemoryInfo sse_decode_memory_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_used = sse_decode_u_64(deserializer);
    var var_total = sse_decode_u_64(deserializer);
    return MemoryInfo(used: var_used, total: var_total);
  }

  @protected
  MonitorInfo sse_decode_monitor_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_disks = sse_decode_opt_list_mounted_info(deserializer);
    var var_memory = sse_decode_opt_box_autoadd_memory_info(deserializer);
    var var_cpu = sse_decode_opt_box_autoadd_cpu_info(deserializer);
    var var_top5Memory = sse_decode_opt_list_software_memory(deserializer);
    var var_top5Cpu = sse_decode_opt_list_software_cpu(deserializer);
    return MonitorInfo(
        disks: var_disks,
        memory: var_memory,
        cpu: var_cpu,
        top5Memory: var_top5Memory,
        top5Cpu: var_top5Cpu);
  }

  @protected
  MountedInfo sse_decode_mounted_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_disk = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_fs = sse_decode_String(deserializer);
    var var_available = sse_decode_u_64(deserializer);
    var var_total = sse_decode_u_64(deserializer);
    return MountedInfo(
        disk: var_disk,
        name: var_name,
        fs: var_fs,
        available: var_available,
        total: var_total);
  }

  @protected
  Map<String, String>? sse_decode_opt_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Map_String_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Attributes? sse_decode_opt_box_autoadd_attributes(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attributes(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  CpuInfo? sse_decode_opt_box_autoadd_cpu_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_cpu_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  EnvParams? sse_decode_opt_box_autoadd_env_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_env_params(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MemoryInfo? sse_decode_opt_box_autoadd_memory_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_memory_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Root? sse_decode_opt_box_autoadd_root(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_root(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<LLMMessage>? sse_decode_opt_list_llm_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_llm_message(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<MountedInfo>? sse_decode_opt_list_mounted_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_mounted_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<SoftwareCpu>? sse_decode_opt_list_software_cpu(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_software_cpu(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<SoftwareMemory>? sse_decode_opt_list_software_memory(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_software_memory(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProcessPortMapper sse_decode_process_port_mapper(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_pid = sse_decode_u_32(deserializer);
    var var_localPort = sse_decode_u_32(deserializer);
    var var_status = sse_decode_opt_String(deserializer);
    var var_processName = sse_decode_opt_String(deserializer);
    return ProcessPortMapper(
        pid: var_pid,
        localPort: var_localPort,
        status: var_status,
        processName: var_processName);
  }

  @protected
  (int, String) sse_decode_record_i_64_string(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_64(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (Int64List, String) sse_decode_record_list_prim_i_64_strict_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_i_64_strict(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, AttributeType, String?)
      sse_decode_record_string_attribute_type_opt_string(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_attribute_type(deserializer);
    var var_field2 = sse_decode_opt_String(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (String, CellType) sse_decode_record_string_cell_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_cell_type(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    String,
    int,
    int?,
    AttributeType,
    String?
  ) sse_decode_record_string_u_32_opt_box_autoadd_u_32_attribute_type_opt_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    var var_field2 = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_field3 = sse_decode_attribute_type(deserializer);
    var var_field4 = sse_decode_opt_String(deserializer);
    return (var_field0, var_field1, var_field2, var_field3, var_field4);
  }

  @protected
  Root sse_decode_root(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_document = sse_decode_document(deserializer);
    return Root(document: var_document);
  }

  @protected
  Software sse_decode_software(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_iconPath = sse_decode_String(deserializer);
    var var_icon = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return Software(name: var_name, iconPath: var_iconPath, icon: var_icon);
  }

  @protected
  SoftwareCpu sse_decode_software_cpu(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_cpu = sse_decode_f_32(deserializer);
    var var_name = sse_decode_String(deserializer);
    return SoftwareCpu(cpu: var_cpu, name: var_name);
  }

  @protected
  SoftwareMemory sse_decode_software_memory(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_memory = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    return SoftwareMemory(memory: var_memory, name: var_name);
  }

  @protected
  TableInfo sse_decode_table_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tableName = sse_decode_String(deserializer);
    var var_columnName = sse_decode_String(deserializer);
    var var_dataType = sse_decode_String(deserializer);
    return TableInfo(
        tableName: var_tableName,
        columnName: var_columnName,
        dataType: var_dataType);
  }

  @protected
  TemplateResult sse_decode_template_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_prompt = sse_decode_String(deserializer);
    var var_index = sse_decode_u_32(deserializer);
    var var_response = sse_decode_String(deserializer);
    return TemplateResult(
        prompt: var_prompt, index: var_index, response: var_response);
  }

  @protected
  TemplateRunningStage sse_decode_template_running_stage(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TemplateRunningStage.values[inner];
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
          RustSimpleNotifyLibPinWindowItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
          RustSimpleNotifyLibPinWindowItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_list_prim_i_64_strict_Sse(
      RustStreamSink<Int64List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_list_prim_i_64_strict,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_llm_message_Sse(
      RustStreamSink<LLMMessage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_llm_message,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_monitor_info_Sse(
      RustStreamSink<MonitorInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_monitor_info,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_record_list_prim_i_64_strict_string_Sse(
      RustStreamSink<(Int64List, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData:
                    sse_decode_record_list_prim_i_64_strict_string,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_template_result_Sse(
      RustStreamSink<TemplateResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_template_result,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_template_running_stage_Sse(
      RustStreamSink<TemplateRunningStage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_template_running_stage,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_attribute_type(AttributeType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_attributes(Attributes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_bool(self.bold, serializer);
    sse_encode_opt_box_autoadd_bool(self.italic, serializer);
    sse_encode_opt_String(self.file, serializer);
    sse_encode_opt_String(self.sql, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_attributes(
      Attributes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attributes(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_cpu_info(CpuInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_cpu_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_database_info(
      DatabaseInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_database_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_env_params(
      EnvParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_env_params(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_memory_info(
      MemoryInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_memory_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_root(Root self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_root(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_cell_type(CellType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_children(Children self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.typeField, serializer);
    sse_encode_data(self.data, serializer);
  }

  @protected
  void sse_encode_cpu_info(CpuInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.current, serializer);
  }

  @protected
  void sse_encode_data(Data self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_64(self.level, serializer);
    sse_encode_list_delum(self.delta, serializer);
    sse_encode_opt_String(self.align, serializer);
  }

  @protected
  void sse_encode_database_info(DatabaseInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_String(self.port, serializer);
    sse_encode_String(self.username, serializer);
    sse_encode_String(self.password, serializer);
    sse_encode_String(self.database, serializer);
  }

  @protected
  void sse_encode_delum(Delum self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.insert, serializer);
    sse_encode_opt_box_autoadd_attributes(self.attributes, serializer);
  }

  @protected
  void sse_encode_document(Document self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.typeField, serializer);
    sse_encode_list_children(self.children, serializer);
  }

  @protected
  void sse_encode_env_params(EnvParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.base, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.chatBase, serializer);
    sse_encode_opt_String(self.sk, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
          List<RustSimpleNotifyLibPinWindowItem> self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockrust_simple_notify_libPinWindowItem(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_children(List<Children> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_children(item, serializer);
    }
  }

  @protected
  void sse_encode_list_delum(List<Delum> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_delum(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_table_info(
      List<List<TableInfo>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_table_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_llm_message(
      List<LLMMessage> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_llm_message(item, serializer);
    }
  }

  @protected
  void sse_encode_list_mounted_info(
      List<MountedInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_mounted_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_process_port_mapper(
      List<ProcessPortMapper> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_process_port_mapper(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_64_string(
      List<(int, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_64_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_attribute_type_opt_string(
      List<(String, AttributeType, String?)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_attribute_type_opt_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_cell_type(
      List<(String, CellType)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_cell_type(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_record_string_u_32_opt_box_autoadd_u_32_attribute_type_opt_string(
          List<(String, int, int?, AttributeType, String?)> self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_u_32_opt_box_autoadd_u_32_attribute_type_opt_string(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_software(List<Software> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_software(item, serializer);
    }
  }

  @protected
  void sse_encode_list_software_cpu(
      List<SoftwareCpu> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_software_cpu(item, serializer);
    }
  }

  @protected
  void sse_encode_list_software_memory(
      List<SoftwareMemory> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_software_memory(item, serializer);
    }
  }

  @protected
  void sse_encode_list_table_info(
      List<TableInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_table_info(item, serializer);
    }
  }

  @protected
  void sse_encode_llm_message(LLMMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.uuid, serializer);
    sse_encode_String(self.content, serializer);
    sse_encode_u_8(self.type, serializer);
  }

  @protected
  void sse_encode_memory_info(MemoryInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.used, serializer);
    sse_encode_u_64(self.total, serializer);
  }

  @protected
  void sse_encode_monitor_info(MonitorInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_mounted_info(self.disks, serializer);
    sse_encode_opt_box_autoadd_memory_info(self.memory, serializer);
    sse_encode_opt_box_autoadd_cpu_info(self.cpu, serializer);
    sse_encode_opt_list_software_memory(self.top5Memory, serializer);
    sse_encode_opt_list_software_cpu(self.top5Cpu, serializer);
  }

  @protected
  void sse_encode_mounted_info(MountedInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.disk, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.fs, serializer);
    sse_encode_u_64(self.available, serializer);
    sse_encode_u_64(self.total, serializer);
  }

  @protected
  void sse_encode_opt_Map_String_String(
      Map<String, String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Map_String_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attributes(
      Attributes? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attributes(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_cpu_info(
      CpuInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_cpu_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_env_params(
      EnvParams? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_env_params(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_memory_info(
      MemoryInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_memory_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_root(Root? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_root(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_llm_message(
      List<LLMMessage>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_llm_message(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_mounted_info(
      List<MountedInfo>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_mounted_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_software_cpu(
      List<SoftwareCpu>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_software_cpu(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_software_memory(
      List<SoftwareMemory>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_software_memory(self, serializer);
    }
  }

  @protected
  void sse_encode_process_port_mapper(
      ProcessPortMapper self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.pid, serializer);
    sse_encode_u_32(self.localPort, serializer);
    sse_encode_opt_String(self.status, serializer);
    sse_encode_opt_String(self.processName, serializer);
  }

  @protected
  void sse_encode_record_i_64_string(
      (int, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_list_prim_i_64_strict_string(
      (Int64List, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_64_strict(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_attribute_type_opt_string(
      (String, AttributeType, String?) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_attribute_type(self.$2, serializer);
    sse_encode_opt_String(self.$3, serializer);
  }

  @protected
  void sse_encode_record_string_cell_type(
      (String, CellType) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_cell_type(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_string_u_32_opt_box_autoadd_u_32_attribute_type_opt_string(
          (String, int, int?, AttributeType, String?) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_u_32(self.$2, serializer);
    sse_encode_opt_box_autoadd_u_32(self.$3, serializer);
    sse_encode_attribute_type(self.$4, serializer);
    sse_encode_opt_String(self.$5, serializer);
  }

  @protected
  void sse_encode_root(Root self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_document(self.document, serializer);
  }

  @protected
  void sse_encode_software(Software self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.iconPath, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.icon, serializer);
  }

  @protected
  void sse_encode_software_cpu(SoftwareCpu self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.cpu, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_software_memory(
      SoftwareMemory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.memory, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_table_info(TableInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.tableName, serializer);
    sse_encode_String(self.columnName, serializer);
    sse_encode_String(self.dataType, serializer);
  }

  @protected
  void sse_encode_template_result(
      TemplateResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.prompt, serializer);
    sse_encode_u_32(self.index, serializer);
    sse_encode_String(self.response, serializer);
  }

  @protected
  void sse_encode_template_running_stage(
      TemplateRunningStage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }
}
