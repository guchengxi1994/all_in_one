// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.35.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../errors.dart';
import '../frb_generated.dart';
import '../llm.dart';
import '../llm/app_flowy_model.dart';
import '../llm/template.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

void initLlm({required String p, dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiInitLlm(p: p, hint: hint);

EnvParams? getLlmConfig({dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiGetLlmConfig(hint: hint);

Stream<LLMMessage> llmMessageStream({dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiLlmMessageStream(hint: hint);

Stream<String> aiHelperMessageStream({dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiAiHelperMessageStream(hint: hint);

Stream<TemplateResult> templateMessageStream({dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiTemplateMessageStream(hint: hint);

Stream<RustError> errorMessageStream({dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiErrorMessageStream(hint: hint);

Stream<TemplateRunningStage> templateStateStream({dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiTemplateStateStream(hint: hint);

Future<void> chat(
        {String? uuid,
        List<LLMMessage>? history,
        required bool stream,
        required String query,
        dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiChat(
        uuid: uuid, history: history, stream: stream, query: query, hint: hint);

Future<void> sequentialChainChat(
        {required String jsonStr, required String query, dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiSequentialChainChat(
        jsonStr: jsonStr, query: query, hint: hint);

Future<String?> templateRenderer({required String template, dynamic hint}) =>
    RustLib.instance.api
        .crateApiLlmApiTemplateRenderer(template: template, hint: hint);

Future<List<(String, AttributeType, String?)>> templateToPrompts(
        {required String template, dynamic hint}) =>
    RustLib.instance.api
        .crateApiLlmApiTemplateToPrompts(template: template, hint: hint);

Future<void> generateFromTemplate(
        {required List<(String, int, int?, AttributeType, String?)> v,
        required bool enablePlugin,
        dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiGenerateFromTemplate(
        v: v, enablePlugin: enablePlugin, hint: hint);

Future<String> optimizeDoc({required String s, dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiOptimizeDoc(s: s, hint: hint);

Root? getDocRootFromStr({required String s, dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiGetDocRootFromStr(s: s, hint: hint);

Future<void> aiHelperQuickRequest(
        {required String s,
        required String tone,
        required String lang,
        required String length,
        required List<String> extra,
        dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiAiHelperQuickRequest(
        s: s, tone: tone, lang: lang, length: length, extra: extra, hint: hint);

void initPromptFromPath({required String s, dynamic hint}) =>
    RustLib.instance.api.crateApiLlmApiInitPromptFromPath(s: s, hint: hint);
